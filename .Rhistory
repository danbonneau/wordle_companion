p
p <- x %>% mutate(month = month(dates))
p
p <- x %>% mutate(month = month(dates), year = year(dates), day = day(dates)) %>% mutate(month = ifelse(month == 5, 6, month))
p
t <- p %>% mutate(date = ymd(year, month, day))
t <- p %>% group_by(dates) %>% mutate(date = ymd(year, month, day))
lubridate
library(lubridate)
t <- p %>% group_by(dates) %>% mutate(date = ymd(paste(year, month, day, sep = "-")))
t
t <- p %>% mutate(date = ymd(paste(year, month, day, sep = "-")))
t
runApp('Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
runApp('Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
runApp('Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
rsconnect::setAccountInfo(name='g1e15g-sam-leahey',
token='AFA28224FAAEE4CE58BB144513DE527B',
secret='g/s4RtTXwFRRBqWHgbNubKWzknurqwCdUp7soQ3Z')
rsconnect::deployApp(
appDir = "C:/Users/danbo/Documents/Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance",
appName = "attendance_dashboard",
account = 'g1e15g-sam-leahey')
type_appt <- appt %>%
filter(!grepl("4", pricing_option_id)) %>%
filter(!grepl("8", pricing_option_id)) %>%
filter(!grepl("Unlimited", pricing_option_id)) %>%
filter(!grepl("Single|1-3|Pre-Paid", pricing_option_id)) %>%
filter(!grepl("Assessment", pricing_option_id)) %>%
filter(date >= ymd("2017-03-01")) %>%
filter(status != "Booked") %>%
select(member_id, full_name, appointment_id, date, pricing_option_id, service_category) %>%
arrange(date, full_name)
head(type_appt)
runApp('Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
runApp('Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
type_appt <- appt %>%
filter(!grepl("4", pricing_option_id)) %>%
filter(!grepl("8", pricing_option_id)) %>%
filter(!grepl("Unlimited", pricing_option_id)) %>%
filter(!grepl("Single|1-3|Pre-Paid", pricing_option_id)) %>%
filter(!grepl("Assessment", pricing_option_id)) %>%
filter(date >= ymd("2017-03-01")) %>%
filter(status != "Booked") %>%
select(member_id, full_name, appointment_id, date, pricing_option_id, service_category, status) %>%
arrange(date, full_name)
head(type_appt)
write.csv(type_appt, file = "subscription_noInformation.csv", row.names = F)
shiny::runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
detach("package:shinydashboardPlus", unload = TRUE)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
detach("package:shinydashboard", unload = TRUE)
library(shinydashboardPlus)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
detach("package:shinydashboard", unload = TRUE)
detach("package:shinydashboardPlus", unload = TRUE)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
detach("package:shinydashboard", unload = TRUE)
detach("package:shinydashboardPlus", unload = TRUE)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
detach("package:shinydashboardPlus", unload = TRUE)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
colnames(words)
colnames(df)
x <- df %>% mutate(rank = dense_rank(prob1))
x
x <- df %>% mutate(rank = dense_rank(desc(prob1)))
table(x)
table(x$rank)
table(x$rank, x$l1)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
shiny::runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
shiny::runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
??div()
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
tagList(
fluidRow(
# column(2, offset = 4,
textInput(inputId = id, label = paste0("Word ", word_id), value = toupper("cares")),
# addClass(id = id, class = "word-button"),
# ),
# column(1, div(style = "margin-top: 25px"),
bsButton(inputId = paste0("go", word_id), "Lock Guess", class = "lockButton"),
# addClass(id = paste0("go", word_id), class = "word-button")
# )
),
fluidRow(
column(width = 6, offset = 3,
splitLayout(
bsButton(inputId = paste0("l1_w", word_id), label = "", class = "tileButton"),
bsButton(inputId = paste0("l2_w", word_id), label = "", class = "tileButton"),
bsButton(inputId = paste0("l3_w", word_id), label = "", class = "tileButton"),
bsButton(inputId = paste0("l4_w", word_id), label = "", class = "tileButton"),
bsButton(inputId = paste0("l5_w", word_id), label = "", class = "tileButton")
)
)
)
)
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
shiny::runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
shiny::runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
runApp('Consulting/YouTube Projects/absurdle_shiny/absurdle_solver')
rsconnect::setAccountInfo(name='ddb0013',
token='1FCF21A99BE0116399C3387CCB53ADB9',
secret='bx7+UM/HFQ5h37Gstw2XQPMwIaYLs/VPsxl1qLkK')
rsconnt::deployApp(appDir = "C:/Users/danbo/Documents/Consulting/YouTube Projects/absurdle_shiny/absurdle_solver", appName = "wordle_solver", account = "ddb0013")
rsconnect::deployApp(appDir = "C:/Users/danbo/Documents/Consulting/YouTube Projects/absurdle_shiny/absurdle_solver", appName = "wordle_solver", account = "ddb0013")
setwd("C:/Users/danbo/Documents/Consulting/YouTube Projects/absurdle_shiny/absurdle_solver")
save(df, "word_list.RData")
save(df, file = "word_list.RData")
runApp()
head(df)
runApp()
rsconnect::setAccountInfo(name='ddb0013',
token='1FCF21A99BE0116399C3387CCB53ADB9',
secret='bx7+UM/HFQ5h37Gstw2XQPMwIaYLs/VPsxl1qLkK')
rsconnect::deployApp(appDir = "C:/Users/danbo/Documents/Consulting/YouTube Projects/absurdle_shiny/absurdle_solver", appName = "wordle_solver", account = "ddb0013")
runApp()
runApp()
ggplot(df, aes(x = l1, y = prob1)) +
geom_bar()
ggplot(df, aes(x = l1, y = prob1)) +
geom_hist()
ggplot(df, aes(x = l1, y = prob1)) +
geom_bar(stat = "identity")
cs <- df %>% filter(l1|l2|l3|l4|l5 %in% 'c')
cs <- df %>% filter("c" %in% words)
ggplot(cs, aes(x = l2, prob2)) +
geom_bar(stat = "identity")
nrow(cs)
cs <- df %>% filter(grepl("c", words))
ggplot(cs, aes(x = l2, prob2)) +
geom_bar(stat = "identity")
cs
cs <- df %>% filter(grepl("C", words))
ggplot(cs, aes(x = l2, prob2)) +
geom_bar(stat = "identity")
ggplot(cs, aes(x = l3, prob3)) +
geom_bar(stat = "identity")
ggplot(cs, aes(x = l4, prob4)) +
geom_bar(stat = "identity")
View(cs)
runApp('~/Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
ref_appt <- appt %>%
filter(referral_type == "") %>%
select(member_id, full_name, appointment_id, date)
head(ref_appt)
ref_appt <- appt %>%
filter(referral_type == "") %>%
select(member_id, full_name, appointment_id, date, referral_type)
head(ref_appt)
ref_appt <- appt %>%
filter(referral_type == "") %>%
select(member_id, full_name, appointment_id, date, referral_type, referral_subtype)
head(ref_appt)
sub_appt <- appt %>%
filter(referral_subtype == "") %>%
select(member_id, full_name, appointment_id, date, referral_type, referral_subtype)
head(sub_appt)
table(appt$referral_subtype)
write.csv(ref_appt, "C:/Users/danbo/documents/upwork/precision sports science/shiny/attendance_dashboard/referral_type_noinfo.csv", stringsAsFactors = F)
write.csv(ref_appt, file = "C:/Users/danbo/documents/upwork/precision sports science/shiny/attendance_dashboard/referral_type_noinfo.csv",
row.names = F)
write.csv(sub_appt, file = "C:/Users/danbo/documents/upwork/precision sports science/shiny/attendance_dashboard/referral_subtype_noinfo.csv",
row.names = F)
table(is.na(roster_join$referral_subtype))
table(is.na(roster_join$gender))
table(roster_join$gender)
table(roster_join$city)
table(roster_join$postal_code)
x <- roster_join %>% filter(referral_type == "")
nrow(x)
runApp('~/Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
ref_appt <- appt %>%
filter(referral_type == "") %>%
select(member_id, full_name, appointment_id, date, referral_type, referral_subtype)
sub_appt <- appt %>%
filter(referral_subtype == "") %>%
select(member_id, full_name, appointment_id, date, referral_type, referral_subtype)
library(shiny)
library(dplyr)
library(tidyr)
library(lubridate)
library(DBI)
library(RPostgres)
library(shinydashboard)
rm(list=ls())
# ----------------------- #
# Read Data from Postgres #
# ----------------------- #
# Connect to Postgres
con <- dbConnect(RPostgres::Postgres(),
user = "postgres",
password = "MakingMoves2020",
host = "precision-db.crnyzeonoczd.us-east-2.rds.amazonaws.com",
port = "5432",
dbname = "postgres",
options="-c search_path=\"Mindbody\""
)
# Read in Appointment Data
# appt <- dbReadTable("biz_appointment", conn = con) # Old from when biz_appointment in public schema
appt <- dbReadTable("mb_appointment", conn = con)
# Read in Roster Data
# roster <- dbReadTable("biz_mindbody_roster", conn = con) # Old from when in Public Schema
roster <- dbReadTable("mb_roster", conn = con)
# Read in Membership/Status data
status <- dbReadTable("mb_status", conn = con)
# This disconnection is only necessary because biz_final_roster is in a different schema than the above tables
dbDisconnect(con)
# Create a subset of columns to be manipulated and joined to our appointment data set
status_join_appt <- status %>%
mutate(month_year = paste(year, month_number, sep = "-")) %>%
select(member_id, month_year, status) %>%
rename(membership_appt = status)
status_join_current <- status %>%
mutate(month_year = paste(year, month_number, sep = "-")) %>%
group_by(member_id) %>%
filter(year == max(year)) %>%
arrange(desc(month_number)) %>%
slice(1) %>%
ungroup() %>%
select(member_id, status) %>%
rename(membership_current = status)
# Connect to public schema of Postgres
con <- dbConnect(RPostgres::Postgres(),
user = "postgres",
password = "MakingMoves2020",
host = "precision-db.crnyzeonoczd.us-east-2.rds.amazonaws.com",
port = "5432",
dbname = "postgres",
options="-c search_path=public"
)
# Read in other roster table - will use this to remove "filler" in full name
roster_omit <- dbReadTable("biz_final_roster", conn = con)
# Disconnect from the public schema database
dbDisconnect(con)
# ------------------------------- #
# Join Name with Appointment Data #
# ------------------------------- #
roster_join <- roster %>%
select(member_id, full_name, gender, city, postal_code, referral_type, referral_subtype) %>%
mutate(gender = stringr::str_to_title(gender)) %>%
mutate(city = stringr::str_to_title(city)) %>%
mutate(zip_code = as.character(postal_code)) %>%
mutate(referral_type = stringr::str_to_title(referral_type)) %>%
mutate(referral_subtype = stringr::str_to_title(referral_subtype))
appt <- left_join(appt, roster_join, by = c("member_id"))
table(is.na(appt$referral_type))
table(roster_omit$referral_type)
table(roster_omit$referral_subtype)
table(roster$referral_subtype)
runApp('~/Upwork/Precision Sports Science/Shiny/attendance_dashboard/attendance')
table(is.na(roster$referral_type))
library(shiny)
library(dplyr)
library(tidyr)
library(lubridate)
library(DBI)
library(RPostgres)
library(shinydashboard)
rm(list=ls())
# ----------------------- #
# Read Data from Postgres #
# ----------------------- #
# Connect to Postgres
con <- dbConnect(RPostgres::Postgres(),
user = "postgres",
password = "MakingMoves2020",
host = "precision-db.crnyzeonoczd.us-east-2.rds.amazonaws.com",
port = "5432",
dbname = "postgres",
options="-c search_path=\"Mindbody\""
)
# Read in Appointment Data
# appt <- dbReadTable("biz_appointment", conn = con) # Old from when biz_appointment in public schema
appt <- dbReadTable("mb_appointment", conn = con)
# Read in Roster Data
# roster <- dbReadTable("biz_mindbody_roster", conn = con) # Old from when in Public Schema
roster <- dbReadTable("mb_roster", conn = con)
# Read in Membership/Status data
status <- dbReadTable("mb_status", conn = con)
# This disconnection is only necessary because biz_final_roster is in a different schema than the above tables
dbDisconnect(con)
# Create a subset of columns to be manipulated and joined to our appointment data set
status_join_appt <- status %>%
mutate(month_year = paste(year, month_number, sep = "-")) %>%
select(member_id, month_year, status) %>%
rename(membership_appt = status)
status_join_current <- status %>%
mutate(month_year = paste(year, month_number, sep = "-")) %>%
group_by(member_id) %>%
filter(year == max(year)) %>%
arrange(desc(month_number)) %>%
slice(1) %>%
ungroup() %>%
select(member_id, status) %>%
rename(membership_current = status)
# Connect to public schema of Postgres
con <- dbConnect(RPostgres::Postgres(),
user = "postgres",
password = "MakingMoves2020",
host = "precision-db.crnyzeonoczd.us-east-2.rds.amazonaws.com",
port = "5432",
dbname = "postgres",
options="-c search_path=public"
)
# Read in other roster table - will use this to remove "filler" in full name
roster_omit <- dbReadTable("biz_final_roster", conn = con)
# Disconnect from the public schema database
dbDisconnect(con)
# ------------------------------- #
# Join Name with Appointment Data #
# ------------------------------- #
roster_join <- roster %>%
select(member_id, full_name, gender, city, postal_code, referral_type, referral_subtype) %>%
mutate(gender = stringr::str_to_title(gender)) %>%
mutate(city = stringr::str_to_title(city)) %>%
mutate(zip_code = as.character(postal_code)) %>%
mutate(referral_type = stringr::str_to_title(referral_type)) %>%
mutate(referral_subtype = stringr::str_to_title(referral_subtype))
appt <- left_join(appt, roster_join, by = c("member_id"))
table(is.na(appt$referral_type))
table(is.na(appt$referral_subtype))
roster_omit_join <- roster_omit %>%
select(mindbody_id, full_name, gender, birth_date, first_appointment_date_short, city_main, postal_code_main, referral_type, referral_subtype) %>%
rename(omit_name = full_name) %>%
mutate(gender_omit = stringr::str_to_title(gender)) %>%
mutate(city_omit = stringr::str_to_title(city_main)) %>%
mutate(postal_code_omit = as.character(postal_code_main)) %>%
mutate(referral_type_omit = stringr::str_to_title(referral_type),
referral_subtype_omit = stringr::str_to_title(referral_subtype)) %>%
rename(first_appt_date = first_appointment_date_short) %>%
select(-gender, -city_main, -referral_type, -referral_subtype)
appt1 <- left_join(appt, roster_omit_join, by = c("member_id" = "mindbody_id")) %>%
filter(!grepl("Filler 5", omit_name)) %>% # Removes 42 appointments with "Filler 5" as name
select(-omit_name) %>%
mutate(gender = ifelse(is.na(gender) & !is.na(gender_omit), gender_omit, gender)) %>%
mutate(city = ifelse(is.na(city) & !is.na(city_omit), city_omit, city)) %>%
mutate(postal_code = ifelse(is.na(postal_code) & !is.na(postal_code_omit), postal_code_omit, postal_code)) %>%
mutate(referral_type = ifelse(is.na(referral_type) & !is.na(referral_type_omit), referral_type_omit, referral_type)) %>%
mutate(referral_subtype = ifelse(is.na(referral_subtype) & !is.na(referral_subtype_omit), referral_subtype_omit, referral_subtype)) %>%
select(-gender_omit, -city_omit, -postal_code_omit, -referral_type_omit, -referral_subtype_omit)
table(is.na(appt1$referral_type))
table(is.na(appt1$referral_subtype))
table(appt$referral_type)
table(appt$referral_subtype)
table(appt1$referral_type)
table(appt1$referral_subtype)
table(appt$referral_subtype)
table(roster$referral_type)
table(roster$referral_subtype)
table(roster_omit$referral_type)
table(roster_omit$referral_subtype)
runApp()
runApp()
runApp()
runApp()
runApp()
head(df)
runApp()
runApp()
runApp()
